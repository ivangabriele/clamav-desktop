use std::collections::HashMap;
use std::fs;
use std::io::{self, BufRead, Write};
use std::path::Path;

use crate::constants;

#[derive(Debug)]
pub struct Config {
    config_map: HashMap<String, constants::ConfigValue>,
}

impl Config {
    pub fn new() -> Self {
        Config {
            config_map: HashMap::new(),
        }
    }

    pub fn from_file(path: &Path) -> io::Result<Self> {
        let file = fs::File::open(path)?;
        let reader = io::BufReader::new(file);
        let mut config = Config::new();

        for line in reader.lines() {
            let line = line?;
            let trimmed_line = line.trim();
            if trimmed_line.starts_with("#") || trimmed_line.is_empty() {
                continue;
            }

            let mut split = trimmed_line.splitn(2, ' ');
            let key = split.next().unwrap().to_string();
            let value = split.next().unwrap().trim_matches('"');

            config.config_map.insert(
                key.clone(),
                match key.clone().as_str() {
                    "MaxAttempts" => constants::ConfigValue::U32Val(value.parse().unwrap()),
                    "ScriptedUpdates" | "LogVerbose" => constants::ConfigValue::YesNoVal(value.parse().unwrap()),
                    "DatabaseMirror" => constants::ConfigValue::StringVal(value.to_string()),
                    _ => continue,
                },
            );
        }

        Ok(config)
    }

    pub fn to_file(&self, path: &Path) -> io::Result<()> {
        let mut file = fs::File::create(path)?;

        // Write the initial comments and warnings
        writeln!(file, "# v1.4.0")?;
        writeln!(file, "# /!\\ DO NOT EDIT THIS FILE BY HAND /!\\")?;
        writeln!(
            file,
            "# This file is automatically generated and managed by ClamAV Desktop."
        )?;
        writeln!(
            file,
            "# If you need to change this configuration, please use the Settings menu in ClamAV Desktop."
        )?;
        writeln!(file)?;

        // Write the configuration options
        for (key, value) in &self.config_map {
            writeln!(file, "{} {}", key, value.to_string())?;
        }

        Ok(())
    }

    pub fn set_value(&mut self, key: &str, value: constants::ConfigValue) {
        self.config_map.insert(key.to_string(), value);
    }

    pub fn get_value(&self, key: &str) -> Option<&constants::ConfigValue> {
        self.config_map.get(key)
    }
}
