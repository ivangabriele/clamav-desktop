name: Bundle

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

concurrency:
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}

jobs:
  bundle_deb:
    name: Bundle DEB (${{ matrix.target }})
    strategy:
      fail-fast: false
      matrix:
        # target: ['aarch64-unknown-linux-gnu', 'x86_64-unknown-linux-gnu']
        target: ['x86_64-unknown-linux-gnu']
    runs-on: ubuntu-latest
    container:
      image: ivangabriele/tauri:debian-bookworm-18
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install core build requirements
        run: make setup-debian
      # - if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
      #   name: Install ARM64 build requirements
      #   run: |
      #     make setup-debian-arm64
      #     ln -sf /usr/bin/pkg-config /usr/bin/aarch64-linux-gnu-pkg-config
      #     echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: 'cargo,clippy,rust-docs,rust-src,rustc,rustfmt'
          rustflags: ''
          target: ${{ matrix.target }}
          toolchain: '1.80'
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          cache: yarn
          node-version: 22
      - name: Prepare
        run: yarn --frozen-lockfile
      - name: Bundle
        run: yarn bundle:deb --target ${{ matrix.target }}
        env:
          TARGET: ${{ matrix.target }}
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}.deb
          path: src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb
          retention-days: 1

  bundle_dmg:
    name: Bundle DMG (${{ matrix.target }})
    strategy:
      fail-fast: false
      matrix:
        target: ['aarch64-apple-darwin', 'x86_64-apple-darwin']
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install core build requirements
        run: make setup-macos
      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: 'cargo,clippy,rust-docs,rust-src,rustc,rustfmt'
          target: ${{ matrix.target }}
          rustflags: ''
          toolchain: '1.80'
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          cache: yarn
          node-version: 22
      - name: Prepare
        run: yarn --frozen-lockfile
      - name: Bundle
        run: yarn bundle:dmg --target ${{ matrix.target }}
        env:
          TARGET: ${{ matrix.target }}
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}.dmg
          path: src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
          retention-days: 1

  bundle_msi:
    name: Bundle MSI (${{ matrix.target }})
    strategy:
      fail-fast: false
      matrix:
        target: ['aarch64-pc-windows-msvc', 'x86_64-pc-windows-msvc']
    runs-on: windows-2022
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: 'cargo,clippy,rust-docs,rust-src,rustc,rustfmt'
          rustflags: ''
          target: ${{ matrix.target }}
          toolchain: '1.80'
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          cache: yarn
          node-version: 22
      - name: Prepare
        run: yarn --frozen-lockfile
      - name: Bundle
        run: yarn bundle:msi --target ${{ matrix.target }}
        env:
          TARGET: ${{ matrix.target }}
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}.msi
          path: src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi
          retention-days: 1
