name: Analysis

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']
  schedule:
    # Every day at 12:00 UTC
    - cron: '0 12 * * *'

concurrency:
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}

jobs:
  codeql:
    name: CodeQL (${{ matrix.label }})
    runs-on: 'ubuntu-latest'
    timeout-minutes: 360
    permissions:
      # Required for all workflows
      security-events: write
      # Required to fetch internal or private CodeQL packs
      packages: read

    strategy:
      fail-fast: false
      matrix:
        include:
          # https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
          # https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
          - language: 'javascript-typescript'
            # Analyze the source code without building it
            build-mode: none
            label: 'JavaScript/TypeScript'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # - name: Initialize CodeQL
      #   uses: github/codeql-action/init@v3
      #   with:
      #     languages: ${{ matrix.language }}
      #     build-mode: ${{ matrix.build-mode }}
      #     # https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
      #     queries: 'security-and-quality,security-extended'
      # - name: Perform CodeQL Analysis
      #   uses: github/codeql-action/analyze@v3
      #   with:
      #     category: '/language:${{matrix.language}}'

  cargo_audit:
    name: Cargo Audit
    runs-on: 'ubuntu-latest'
    container:
      image: ivangabriele/tauri:debian-bullseye-18
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # - name: Install cargo-audit
      #   run: cargo install cargo-audit
      # - name: Run
      #   run: cargo audit
      #   working-directory: ./src-tauri
